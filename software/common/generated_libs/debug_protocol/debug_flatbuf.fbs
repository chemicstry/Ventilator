// # Overview
//
// This file defines messages sent between the ventilator's microcontroller's
// debugging interface and the host computer interfacing with it via the Python
// debugging interface.
//
// Commands from the host are serialized and sent over the serial port to the
// microcontroller, which evaluates the corresponding functions in its debugging
// interface and responds with the requested information or an error.
//
// Flatbuffer is strongly typed, so we split the metadata of the debug variable
// from the actual value for each type (int32, uint32, float)
//
// # Regenerate C++ and Python flatbuffers (flatc version 1.11.0)
// $ flatc --cpp --scoped-enums debug_flatbuf.fbs &&
//      flatc --python --scoped-enums -o ../../../utils/debug/ debug_flatbuf.fbs

namespace DebugFB;

table Int   { val : int; }
table UInt  { val : uint; }
table Float { val : float; }

// REQUEST
// Command Codes
enum CmdCode : byte {
  Mode = 0x00,               // Return the current firmware mode
  Peek = 0x01,               // Peek into RAM
  Poke = 0x02,               // Poke values into RAM
  Console = 0x03,            // Read strings from the print buffer - deprecated
  Variable = 0x04,           // Variable access
  Trace = 0x05,              // Data trace commands
  EepromAccess = 0x06        // Read/Write in I2C EEPROM
}

// Subcommand Codes
// Variable access subcommand code
enum VarSubcmd : byte {
    GetInfo = 0x00,          // Get variable info (name, type, help string)
    Get = 0x01,              // Get variable value
    Set = 0x02,              // Set variable value
    GetCount = 0x03          // Get count of active vars
}

// Variable type for variable get info function
enum VarType : byte {
    Int32 = 0x00,
    UInt32 = 0x01,
    Float = 0x02
}

// Variable access for variable get info function
enum VarAccess : byte {
    ReadOnly = 0x00,
    ReadWrite = 0x01,
}

// Command data
// Variable access command data
table VarAccessData {
    subcmd : VarSubcmd;          // Variable subcommand
    vid : ushort = 0xFFFF;       // Variable ID
    val : uint = 0xFFFFFFFF;     // Variable value (used in SetVar)
}

union CmdData { VarAccessData }

table Request {
    cmd : CmdCode;           // Command code
    cmddata : CmdData;       // Command data
}

// RESPONSE
enum ErrorCode : byte {
  None = 0x00,            // No error (=success)
  CrcError = 0x01,        // CRC error on command
  UnknownCommand = 0x02,  // Unknown command code received
  MissingData = 0x03,     // Not enough data passed with command
  NoMemory = 0x04,        // Insufficient memory
  InternalError = 0x05,   // Some type of internal error (aka bug)
  UnknownVariable = 0x06, // The requested variable ID is invalid
  InvalidData = 0x07,     // Data is out of range
  Timeout = 0x08,         // Response timeout
}

// Some responses need their own tables because they're more complex. Others can be a generic Int, Uint, or Float.
table GetVarInfoResponse {
    type: VarType;
    access : VarAccess;
    name : string;
    fmt : string;
    help : string;
    unit : string;
}

// Generic response data union
union ResponseData { Int, UInt, Float, GetVarInfoResponse }
