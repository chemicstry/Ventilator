# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DebugFlatbuf

import flatbuffers


class VarAccessData(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAsVarAccessData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VarAccessData()
        x.Init(buf, n + offset)
        return x

    # VarAccessData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VarAccessData
    def Subcmd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # VarAccessData
    def Vid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint16Flags, o + self._tab.Pos
            )
        return 65535

    # VarAccessData
    def Val(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint32Flags, o + self._tab.Pos
            )
        return 4294967295


def VarAccessDataStart(builder):
    builder.StartObject(3)


def VarAccessDataAddSubcmd(builder, subcmd):
    builder.PrependInt8Slot(0, subcmd, 0)


def VarAccessDataAddVid(builder, vid):
    builder.PrependUint16Slot(1, vid, 65535)


def VarAccessDataAddVal(builder, val):
    builder.PrependUint32Slot(2, val, 4294967295)


def VarAccessDataEnd(builder):
    return builder.EndObject()
